# .github/workflows/rust.yml
name: Rust

on:
  push:
    branches: [ 'main', 'stable' ]    # any push to main/stable triggers build & release
  pull_request:
    branches: [ '**' ]            # PRs still get built & tested

permissions:
  contents: write                # allow create‑release & upload assets

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Build (release)
        run: cargo build --release

      - name: Locate binary
        id: find_bin
        shell: bash
        run: |
          BIN=$(find target/release -maxdepth 1 -type f | head -n1)
          echo "bin_path=$BIN" >> $GITHUB_OUTPUT
          echo "upload_name=$(basename $BIN)" >> $GITHUB_OUTPUT

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifact
          path: ${{ steps.find_bin.outputs.bin_path }}

  release:
    name: Create Release & Attach Binaries
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stable'

    steps:
      - name: Create GitHub Release
        id: create_rel
        uses: actions/create-release@v1
        with:
          tag_name: run-${{ github.run_id }}       # guaranteed unique, not pure‑hex
          release_name: Release #${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest-artifact
          path: ./artifacts/linux

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-artifact
          path: ./artifacts/windows

      - name: Find downloaded binaries
        id: find_downloads
        shell: bash
        run: |
          L=$(find artifacts/linux -type f | head -n1)
          W=$(find artifacts/windows -type f | head -n1)
          echo "linux_bin=$L" >> $GITHUB_OUTPUT
          echo "windows_bin=$W" >> $GITHUB_OUTPUT

      - name: Upload Linux binary to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_rel.outputs.upload_url }}
          asset_path: ${{ steps.find_downloads.outputs.linux_bin }}
          asset_name: $(basename ${{ steps.find_downloads.outputs.linux_bin }})
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows binary to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_rel.outputs.upload_url }}
          asset_path: ${{ steps.find_downloads.outputs.windows_bin }}
          asset_name: $(basename ${{ steps.find_downloads.outputs.windows_bin }})
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
