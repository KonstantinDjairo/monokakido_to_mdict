name: Rust

on:
  push:
    branches: [ '**' ]    # build+release on any branch push
  pull_request:
    branches: [ '**' ]    # build+test on any PR

permissions:
  contents: write        # allow creating releases & uploading assets

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Build (release)
        run: cargo build --release

      - name: List release dir for debug
        run: ls -l target/release
        shell: bash

      - name: Locate built binary
        id: find_bin
        run: |
          BIN=$(find target/release -maxdepth 1 -type f | head -n1)
          echo "bin_path=$BIN" >> $GITHUB_OUTPUT
          echo "upload_name=$(basename $BIN)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stable'
        id: create_rel
        uses: actions/create-release@v1
        with:
          # use run number to guarantee uniqueness, and prefix so it's not pure-hex
          tag_name: run-${{ github.run_number }}
          release_name: Release #${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stable'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_rel.outputs.upload_url }}
          asset_path: ${{ steps.find_bin.outputs.bin_path }}
          asset_name: ${{ steps.find_bin.outputs.upload_name }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
